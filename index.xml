<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Zig monthly</title><link>https://zigmonthly.org/</link><description>Recent content on Zig monthly</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 25 Sep 2021 00:00:00 -0700</lastBuildDate><atom:link href="https://zigmonthly.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Zig monthly, September 2021: Unicode, Android, cross-platform GUIs, learning resources &amp; more</title><link>https://zigmonthly.org/letters/2021/september/</link><pubDate>Sat, 25 Sep 2021 00:00:00 -0700</pubDate><guid>https://zigmonthly.org/letters/2021/september/</guid><description>&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/134820515-8d672889-4deb-4b82-bec0-8497de9293f8.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/134820515-8d672889-4deb-4b82-bec0-8497de9293f8.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="slingworks--the-underburrow-game">Slingworks &amp;amp; The Underburrow game&lt;/h1>
&lt;blockquote>
&lt;p>&lt;em>Underburrow is a speed running platformer game where you gather momentum with well timed button taps&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://github.com/JonSnowbd/slingworks">@JonSnowbd shares &lt;em>Slingworks 0.1&lt;/em>&lt;/a>: a simple and powerful Windows+Linux &amp;lsquo;bring your content&amp;rsquo; engine built in Zig, as well as &lt;a href="https://github.com/JonSnowbd/underburrow">Underburrow&lt;/a>: an all encompassing example for how Slingworks development works.&lt;/p>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/134818362-4736ee45-1aa0-407c-92b0-c4a5b301d4d4.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/134818362-4736ee45-1aa0-407c-92b0-c4a5b301d4d4.mp4">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/134818764-20d3f95c-090c-4000-8595-7e205247360e.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;p>Both are still heavily under development, but it&amp;rsquo;s already quite cool:&lt;/p>
&lt;p>&lt;a href="https://user-images.githubusercontent.com/3173176/134818377-5f4f40dc-9436-4aef-906e-7256d8f5c2a9.png">&lt;img width="240px" src="https://user-images.githubusercontent.com/3173176/134818377-5f4f40dc-9436-4aef-906e-7256d8f5c2a9.png">&lt;/img>&lt;/a> &lt;a href="https://user-images.githubusercontent.com/3173176/134818383-1a2d2e23-0907-47cb-89be-b2b019e487b5.png">&lt;img width="240px" src="https://user-images.githubusercontent.com/3173176/134818383-1a2d2e23-0907-47cb-89be-b2b019e487b5.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://user-images.githubusercontent.com/3173176/134818386-bcadf2f4-08c6-4b3b-8770-b06a8a7a1721.png">&lt;img width="240px" src="https://user-images.githubusercontent.com/3173176/134818386-bcadf2f4-08c6-4b3b-8770-b06a8a7a1721.png">&lt;/img>&lt;/a> &lt;a href="https://user-images.githubusercontent.com/3173176/134818389-a8840e3c-cb5d-43d8-b71e-2a7e7a4c56f0.png">&lt;img width="240px" src="https://user-images.githubusercontent.com/3173176/134818389-a8840e3c-cb5d-43d8-b71e-2a7e7a4c56f0.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>Check it out: &lt;a href="https://github.com/JonSnowbd/slingworks">Slingworks&lt;/a> | &lt;a href="https://github.com/JonSnowbd/underburrow">Underburrow&lt;/a>&lt;/p>
&lt;h1 id="unicode">Unicode&lt;/h1>
&lt;p>Unicode is complex: even in languages with excellent support for it such as Go (by creators as UTF-8 itself) there is still regular confusion and subtle bugs &lt;a href="https://www.reddit.com/r/golang/comments/o1o5hr/fyi_a_single_go_rune_is_not_the_same_as_a_single/">lurking behind incorrect assumptions about what runes/code-points and grapheme clusters are.&lt;/a>.&lt;/p>
&lt;p>Zig has, thus far, taken a &lt;em>lighter weight&lt;/em> stance on Unicode: there are no native unicode types in the language, and the standard library is light weight in terms of Unicode support.&lt;/p>
&lt;p>But many in the Zig community, myself included, care about Unicode support immensely - and &lt;a href="https://github.com/jecolon">@jecolon&lt;/a> has been working tirelessly on two libraries:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jecolon/ziglyph">Ziglyph&lt;/a>: Unicode text processing for the Zig Programming Language.&lt;/li>
&lt;li>&lt;a href="https://github.com/jecolon/zigstr">Zigstr&lt;/a>: A UTF-8 string type (which exposes Grapheme clusters instead of code points to avoid foot-guns.)&lt;/li>
&lt;/ul>
&lt;p>As well as a series of articles:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zig.news/dude_the_builder/unicode-basics-in-zig-dj3">Unicode basics in Zig&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/dude_the_builder/ziglyph-unicode-wrangling-llj">Ziglyph Unicode wrangling&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/dude_the_builder/unicode-string-operations-536e">Unicode string operations&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/andrewrk">@andrewrk&lt;/a> and &lt;a href="https://github.com/jecolon">@jecolon&lt;/a> are also &lt;a href="https://github.com/ziglang/zig/issues/234#issuecomment-922065852">working together&lt;/a> to ensure Zig&amp;rsquo;s &lt;code>std.unicode&lt;/code> library is a reasonable API in general before Zig 1.0.&lt;/p>
&lt;h1 id="android-support">Android support&lt;/h1>
&lt;p>&lt;a href="https://github.com/MasterQ32/ZigAndroidTemplate">@MasterQ32 has created a Zig android template repository&lt;/a> - showing off how to create a minimal Android app in Zig.&lt;/p>
&lt;p>Also see his earlier 2021 FOSDEM talk: &lt;a href="https://fosdem.org/2021/schedule/event/zig_android/">Create an Android Application with Zig&lt;/a> - I&amp;rsquo;ve included a short clip of the demo within for your enjoyment:&lt;/p>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/134788433-811ce689-ed38-40d3-8fda-09f5364e9734.mov" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/134788433-811ce689-ed38-40d3-8fda-09f5364e9734.mov">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/134788463-ee505626-01d0-435c-9f74-05b0483aee74.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;p>Felix also has aspirations to do Zig-on-iOS work, so please &lt;a href="https://github.com/sponsors/MasterQ32">consider sponsoring him&lt;/a> for some Apple hardware if his work appeals to you!&lt;/p>
&lt;h1 id="test-your-c-code-with-zig">Test your C code with Zig&lt;/h1>
&lt;p>&lt;a href="https://twitter.com/TommiSinivuo">@Pixeli&lt;/a> on Twitter has shared an extremely cool topic: &lt;a href="https://twitter.com/TommiSinivuo/status/1432393016761856003">how to easily test your existing C code using Zig&lt;/a>.&lt;/p>
&lt;h1 id="iup-cross-platform-gui-for-zig">IUP (cross platform GUI) for Zig&lt;/h1>
&lt;p>Rafael Batiati has shared a very interesting article: &lt;a href="https://zig.news/batiati/iup-for-zig-4ah">IUP for Zig&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s a cross-platform GUI toolkit developed by PUC-RIO, the same university behind the excellent Lua language.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/134789187-8e3eddef-30e2-4fd7-b296-eb4de0f911f1.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/134789187-8e3eddef-30e2-4fd7-b296-eb4de0f911f1.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/134789196-25ead67b-3939-49a1-b065-1ba77762ceb1.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/134789196-25ead67b-3939-49a1-b065-1ba77762ceb1.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="robinhood-hash-tables">Robinhood hash tables&lt;/h1>
&lt;p>&lt;a href="https://github.com/lithdew">Kenta Iwasaki&lt;/a> shared their robin hash table implementation:&lt;/p>
&lt;blockquote>
&lt;p>A robin hood hash table that keeps entries lexicographically sorted. Assumes that keys are 256-bit cryptographic hashes. Able to insert 25.8 million entries per second, query 30.83 million entries per second, and delete 24.21 million entries per second.&lt;/p>
&lt;p>Using it as one of the core main-memory data structures for a blockchain I&amp;rsquo;m writing in Zig called Rheia. Wrote and improved upon the data structure based on Twitter comments and articles made by Per Vognsen and Paul Khuong.&lt;/p>
&lt;p>Beats any other sorted data structure I&amp;rsquo;ve benchmarked so far in terms of insertion/query/deletion throughput by 3-4x order of magnitudes.&lt;/p>
&lt;p>&lt;a href="https://github.com/lithdew/rheia/blob/master/hash_map.zig">https://github.com/lithdew/rheia/blob/master/hash_map.zig&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h1 id="ray-tracing-in-a-weekend">Ray tracing in a weekend&lt;/h1>
&lt;p>&lt;a href="https://github.com/Jack-Ji/ray-tracing-weekend.zig">@Jack-Ji has implemented&lt;/a> the famous &lt;a href="https://raytracing.github.io">ray-tracing-in-a-weekend&lt;/a> in Zig:&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/134789958-20a0d223-6510-42b5-8878-d7ad94f8c14c.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/134789958-20a0d223-6510-42b5-8878-d7ad94f8c14c.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="fast-lru-cache">Fast LRU cache&lt;/h1>
&lt;p>Also brought to us by &lt;a href="https://github.com/lithdew">Kenta Iwasaki&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Wrote a really fast LRU cache that is an amalgamation of both a robin hood hash table and a doubly-linked deque.&lt;/p>
&lt;p>On my laptop, with a max load factor of 50%, roughly:&lt;/p>
&lt;ul>
&lt;li>19.81 million entries can be upserted per second.&lt;/li>
&lt;li>20.19 million entries can be queried per second.&lt;/li>
&lt;li>9.97 million entries can be queried and removed per second.&lt;/li>
&lt;/ul>
&lt;p>The code is available here w/ unit tests and benchmarks: &lt;a href="https://github.com/lithdew/rheia/blob/master/lru.zig">https://github.com/lithdew/rheia/blob/master/lru.zig&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h1 id="exceptional-articles">Exceptional articles&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://zig.news/andres/crafting-an-interpreter-in-zig-part-1-jdh">Crafting an Interpreter in Zig&lt;/a> - Andres&lt;/li>
&lt;li>&lt;a href="https://zig.news/xq/zig-build-explained-part-1-59lf">Zig build explained&lt;/a> - Felix &amp;ldquo;xq&amp;rdquo; Queißner&lt;/li>
&lt;li>&lt;a href="https://zig.news/david_vanderson/interfaces-in-zig-o1c">Interfaces in Zig&lt;/a> - David Vanderson&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/struct-of-arrays-soa-in-zig-easy-in-userland-40m0">Struct of Arrays (SoA) in Zig? Easy &amp;amp; in Userland!&lt;/a> - Loris Cro&lt;/li>
&lt;li>&lt;a href="https://zig.news/andrewrk/how-to-use-hash-map-contexts-to-save-memory-when-doing-a-string-table-3l33">How to use hash map contexts to save memory when doing a string table&lt;/a> - Andrew Kelley&lt;/li>
&lt;li>&lt;a href="https://zig.news/squeek502/code-coverage-for-zig-1dk1">Code coverage for Zig&lt;/a> - Ryan Liptak&lt;/li>
&lt;li>&lt;a href="https://zig.news/kprotty/resource-efficient-thread-pools-with-zig-3291">Resource efficient Thread Pools with Zig&lt;/a> - Protty&lt;/li>
&lt;/ul>
&lt;h1 id="learning-zig">Learning Zig&lt;/h1>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/1458409/109398392-c1069500-790a-11eb-8ed4-7d7d74d32666.jpg">&lt;img width="650px" src="https://user-images.githubusercontent.com/1458409/109398392-c1069500-790a-11eb-8ed4-7d7d74d32666.jpg">&lt;/img>&lt;/a>&lt;/p>
&lt;p>Now seems like an excellent time to point out two resources for anyone considering learning Zig:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/ratfactor/ziglings">Ziglings&lt;/a>: a series of tiny broken programs. By fixing them, you&amp;rsquo;ll learn how to read and write Zig code.&lt;/li>
&lt;li>&lt;a href="https://ziglang.org/documentation/master">ziglang.org/documentation/master&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ziglearn.org">ziglearn.org&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="new-zig-tutorials">New Zig tutorials&lt;/h1>
&lt;p>Since &lt;a href="https://zigmonthly.org/letters/2021/august/#tutorials">last month&amp;rsquo;s beginner tutorials&lt;/a>, &lt;a href="https://zig.news">https://zig.news&lt;/a> has blown up with awesome tutorials all around:&lt;/p>
&lt;ul>
&lt;li>Intro to Zig - Sobeston:
&lt;ul>
&lt;li>&lt;a href="https://zig.news/sobeston/fizz-buzz-3fao">Fizz Buzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/sobeston/fahrenheit-to-celsius-akf">Fahrenheit to Celsius&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/sobeston/a-guessing-game-5fb1">A guessing game&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/what-s-undefined-in-zig-9h">What&amp;rsquo;s undefined in Zig?&lt;/a> - Loris Cro&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/what-s-a-string-literal-in-zig-31e9">What&amp;rsquo;s a String Literal in Zig?&lt;/a> - Loris Cro&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/how-to-add-buffering-to-a-writer-reader-in-zig-7jd">How to Add Buffering to a Reader / Writer in Zig&lt;/a> - Loris Cro&lt;/li>
&lt;li>C/C++/Zig interoperability - Loris Cro
&lt;ul>
&lt;li>&lt;a href="https://zig.news/kristoff/extend-a-c-c-project-with-zig-55di">Extend a C/C++ Project with Zig&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/make-zig-your-c-c-build-system-28g5">Make Zig Your C/C++ Build System&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/cross-compile-a-c-c-project-with-zig-3599">Cross-compile a C/C++ Project with Zig&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/compile-a-c-c-project-with-zig-368j">Compile a C/C++ Project with Zig&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="new-podcasts--videos">New podcasts &amp;amp; videos&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=tQHTvQqBhS8">Zig ⚡ SHOWTIME #29: Don&amp;rsquo;t Rewrite, Reinvent!&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://youtu.be/QFOxAUjXe0g">CoffeeTIME: The ZSF is 1 year old!&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=1F5eprScpvA">CoffeeTIME: AWS ❤️ Rust&lt;/a> - an insightful discussion about the relationship between AWS and Rust&lt;/li>
&lt;li>Launching the &lt;a href="https://www.tigerbeetle.com/20k-challenge">TigerBeetle $20,000 consensus challenge&lt;/a>, there was a 2.5 hour &lt;a href="https://www.youtube.com/watch?v=_Jlikdtm4OA">Zig ⚡ SHOWTIME #28: Viewstamped Replication Made Famous&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=qeWyc8G-lq4">Viewstamped Replication Made Famous - Joran Greef&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=ps106zjmjhw">Revisiting Viewstamped Replication with Brian Oki and James Cowling&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/channel/UCpaTqf90rm1jmJI49BtVMRw">Coderlyfe&lt;/a> has been steadily producing a series of Zig video tutorials if that&amp;rsquo;s your cup of mocha:
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=4XrsIOkS5sY">Optionals&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=hv71foOAPVk">Blocks and closures&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=t9EUoSojDUw">Errors / exception handling&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=bS7jtl-CoEs">Allocators&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=JEHZJHfiAfk">Unions/variants&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=NN1GC0E8J6I">Structs and OOP&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="upcoming-events">Upcoming events&lt;/h1>
&lt;p>&lt;a href="https://www.handmade-seattle.com">Handmade Seattle&lt;/a> has several attendees from the Zig community, as well as talks and demos for Zig November 11-12, 2021.&lt;/p>
&lt;p>P.S. In case you missed it, &lt;a href="https://ziglang.org/download/0.8.1/release-notes.html">Zig 0.8.1 has been released&lt;/a>!&lt;/p>
&lt;hr>
&lt;p>If you&amp;rsquo;re one of the 150+ subscribers or &lt;a href="https://zigmonthly.org/privacy">3.5k+ viewers&lt;/a>, thanks for reading!&lt;/p>
&lt;p>Please consider &lt;a href="https://github.com/sponsors/slimsag">supporting my work&lt;/a>&lt;/p></description></item><item><title>Zig monthly, August 2021: iOS support, tutorials, tree-sitter, a pathtracer, and more</title><link>https://zigmonthly.org/letters/2021/august/</link><pubDate>Sun, 01 Aug 2021 03:00:00 -0700</pubDate><guid>https://zigmonthly.org/letters/2021/august/</guid><description>&lt;h1 id="announcing-zigmonthlyorg">Announcing zigmonthly.org&lt;/h1>
&lt;p>Today, I am launching zigmonthly.org: a once-a-month publication where I curate all things Zig that I’ve seen since the past month from the Zig Discord channels, &lt;a href="https://zig.news">zig.news&lt;/a>, Twitter, Reddit, etc. and do my best to come up with a nice showcase. &lt;a href="https://zigmonthly.org/about">Learn more&lt;/a>&lt;/p>
&lt;h1 id="zig-cross-compiling-to-ios-yes-please">Zig cross compiling to iOS? Yes please!&lt;/h1>
&lt;p>Nearly matching up with &lt;a href="https://twitter.com/andy_kelley/status/1424163667306631168">Zig&amp;rsquo;s 6th birthday&lt;/a>, &lt;a href="https://github.com/kubkon">@kubkon&lt;/a> (a core team member and author of Zig&amp;rsquo;s MachO linker) has begun &lt;a href="https://github.com/ziglang/zig/pull/9532">adding minimal support for building iOS binaries with Zig, from any OS&lt;/a>. Here&amp;rsquo;s one running in the iOS emulator on a Mac:&lt;/p>
&lt;p>&lt;a href="https://user-images.githubusercontent.com/3173176/128664203-c9c0954d-fe74-43aa-964d-458f0fe74565.png">&lt;img width="480px" src="https://user-images.githubusercontent.com/3173176/128664203-c9c0954d-fe74-43aa-964d-458f0fe74565.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="tree-sitter-for-zig">Tree Sitter for Zig&lt;/h1>
&lt;p>&lt;a href="https://github.com/maxxnino">@maxxnino&lt;/a> has released a &lt;a href="https://github.com/maxxnino/tree-sitter-zig">tree sitter parser for Zig&lt;/a>.&lt;/p>
&lt;p>(&lt;a href="https://tree-sitter.github.io/tree-sitter/">Tree-sitter&lt;/a> is a parsing framework from GitHub used for a variety of editors and IDEs, such as &lt;a href="https://neovim.io/doc/treesitter">NeoVim&lt;/a> and OniVim for code navigation and syntax highlighting. It&amp;rsquo;s also used by static analysis tools like &lt;a href="https://semgrep.dev">Semgrep&lt;/a> and powers GitHub&amp;rsquo;s code navigation features - so having an implementation for Zig could prove quite useful!)&lt;/p>
&lt;h1 id="a-twin-stick-shooter">A twin stick shooter&lt;/h1>
&lt;p>@unvestigate &lt;a href="https://discord.com/channels/605571803288698900/605572611539206171/873274345160589392">shared in the Zig discord&lt;/a> a video of their twin stick shooter they began building four days ago, with all gameplay code in Zig:&lt;/p>
&lt;video width="480px" src="https://user-images.githubusercontent.com/3173176/128664622-b3f37ad2-56ba-47ba-bc53-4ee87893b009.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/128664622-b3f37ad2-56ba-47ba-bc53-4ee87893b009.mp4">
&lt;img width="480px" src="https://user-images.githubusercontent.com/3173176/128806787-a091b018-3881-46e2-804f-53ee8863cca2.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;h1 id="prometheus-style-metrics-for-your-zig-applications">Prometheus-style metrics for your Zig applications&lt;/h1>
&lt;p>&lt;a href="https://github.com/vrischmann">@vrischmann&lt;/a> released &lt;a href="https://github.com/vrischmann/zig-prometheus">a library&lt;/a> that enables one to add Prometheus-inspired counters, gauges, and histograms to their Zig applications - for use primarily with &lt;a href="https://github.com/VictoriaMetrics/VictoriaMetrics">VictoriaMetrics&lt;/a>, a Prometheus alternative.&lt;/p>
&lt;h1 id="positron---a-web-renderer-frontend-for-zig-applications">Positron - a web renderer frontend for Zig applications&lt;/h1>
&lt;p>&lt;a href="https://github.com/MasterQ32">@MasterQ32&lt;/a> has released &lt;a href="https://github.com/ziglibs/positron">Positron&lt;/a>, a web renderer frontend for Zig applications. These Zig bindings to the popular &lt;a href="https://github.com/webview/webview">webview&lt;/a> library, enable one to write cross-platform HTML5 UI applications:&lt;/p>
&lt;p>&lt;a href="https://raw.githubusercontent.com/ziglibs/positron/04af916ddf4dbdf5ae44ef754e1a5ff3af1ddef9/screenshots/i3-login.png">&lt;img width="240px" src="https://raw.githubusercontent.com/ziglibs/positron/04af916ddf4dbdf5ae44ef754e1a5ff3af1ddef9/screenshots/i3-login.png">&lt;/img>&lt;/a> &lt;a href="https://raw.githubusercontent.com/ziglibs/positron/04af916ddf4dbdf5ae44ef754e1a5ff3af1ddef9/screenshots/windows-chat.png">&lt;img width="240px" src="https://raw.githubusercontent.com/ziglibs/positron/04af916ddf4dbdf5ae44ef754e1a5ff3af1ddef9/screenshots/windows-chat.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="zigmod">zigmod&lt;/h1>
&lt;p>&lt;a href="https://github.com/nektro">@nektro&lt;/a> continues her work on &lt;a href="https://github.com/nektro/zigmod">zigmod&lt;/a>, a package manager for the Zig programming language - this month releasing v67 for various bug fixes. The project has now hit over 500 commits and 3.6k lines of code, when you add in the fact that zigmod uses a few handfuls of Zig dependencies - I think it&amp;rsquo;s an interesting large Zig project.&lt;/p>
&lt;p>I should also note an &lt;a href="https://github.com/ziglang/zig/issues/943">official Zig package manager is planned&lt;/a>.&lt;/p>
&lt;h1 id="a-simple-karaoke-player">A simple Karaoke player&lt;/h1>
&lt;p>@captainhorst &lt;a href="https://discord.com/channels/605571803288698900/605572611539206171/873690060950761522">shared in the Zig Discord&lt;/a> their recent project: a simple Karaoke player (note: video has no audio.)&lt;/p>
&lt;p>&lt;a href="https://user-images.githubusercontent.com/3173176/128665375-276d55b5-3b46-4022-bf11-78043a498c04.mp4">video&lt;/a>&lt;/p>
&lt;video width="480px" src="https://user-images.githubusercontent.com/3173176/128665375-276d55b5-3b46-4022-bf11-78043a498c04.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/128665375-276d55b5-3b46-4022-bf11-78043a498c04.mp4">
&lt;img width="480px" src="https://user-images.githubusercontent.com/3173176/128806923-49b0425e-b242-4230-87b5-08e0ffe14a53.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;h1 id="a-path-tracer">A path tracer&lt;/h1>
&lt;p>&lt;a href="https://github.com/msinilo">@msinilo&lt;/a> shares &lt;a href="http://msinilo.pl/blog2/post/zig-pathtracer/">a detailed write-up&lt;/a> and their experience implementing a simple ray tracer in Zig - with no prior Zig experience!&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;I’ve to admit I went in completely ‘blind’, didn’t know much about the language other than some passing remarks posted on Twitter. I kinda expected another Rust, so initially was a bit put off by how “Spartan” Zig was. After I adjusted and started taking it for what it was – a modern “C+” alternative – it actually became a very fun experiment.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/3173176/128806390-0b93b3e1-9559-4a4a-85d1-440caec9bc96.png" alt="">&lt;/p>
&lt;h1 id="tutorials">Tutorials&lt;/h1>
&lt;p>&lt;a href="https://kristoff.it">Loris Cro, VP of community at the Zig Software Foundation&lt;/a> has been putting together multiple beginner tutorials over on &lt;a href="https://zig.news">https://zig.news&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zig.news/kristoff/where-is-print-in-zig-57e9">Where is print() in Zig?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/how-to-add-buffering-to-a-writer-reader-in-zig-7jd">How to Add Buffering to a Reader / Writer in Zig&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/what-s-a-string-literal-in-zig-31e9">What&amp;rsquo;s a String Literal in Zig?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/what-s-undefined-in-zig-9h">What&amp;rsquo;s undefined in Zig?&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="see-also">See also&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://corecursive.com/067-zig-with-andrew-kelley/">Full-Time Open Source With Andrew Kelley&lt;/a> (podcast, transcribed)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>Enjoying Zig monthly? Please consider &lt;a href="https://github.com/sponsors/slimsag">supporting my work&lt;/a>&lt;/p></description></item><item><title>Zig monthly, October 2021: Games, gamedev, Elixir, tools &amp; more</title><link>https://zigmonthly.org/letters/2021/october/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zigmonthly.org/letters/2021/october/</guid><description>&lt;p>&lt;a href="https://user-images.githubusercontent.com/3173176/139949770-9002e36d-3c00-447c-a9ab-b9f52c251b28.png">https://user-images.githubusercontent.com/3173176/139949770-9002e36d-3c00-447c-a9ab-b9f52c251b28.png&lt;/a>&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/139949770-9002e36d-3c00-447c-a9ab-b9f52c251b28.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/139949770-9002e36d-3c00-447c-a9ab-b9f52c251b28.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>Wow! So much has happened over the last month in Zig that it&amp;rsquo;s been downright overwhelming, let&amp;rsquo;s dive right in!&lt;/p>
&lt;h1 id="digital-scavenger-game">Digital Scavenger (game)&lt;/h1>
&lt;p>&lt;a href="https://github.com/sponsors/MasterQ32">Felix &amp;ldquo;xq&amp;rdquo; Queißner&lt;/a> - you may recall his &lt;a href="https://zigmonthly.org/letters/2021/september#android-support">Android support&lt;/a> in the last zigmonthly. He&amp;rsquo;s back, and this time sharing an early gameplay video of his Digital Scavenger game prototype:&lt;/p>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/139792411-55d711fe-3504-44bd-9f04-79f944cf4c83.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/139792411-55d711fe-3504-44bd-9f04-79f944cf4c83.mp4">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/139793155-c6ef5256-be38-421f-847e-4909369fd30c.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;p>As he &lt;a href="https://twitter.com/ikskuh/status/1455225369804562434">writes on Twitter&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Full feature showcase of my current gamedev project. Most of the stuff started to come into reality in the last week and everything is still just a prototype.&lt;/p>
&lt;p>It&amp;rsquo;s built with Zig, OpenGL ES 2.0 and a lot of love, also uses Box2D.&lt;/p>
&lt;/blockquote>
&lt;p>I highly encourage &lt;a href="https://github.com/sponsors/MasterQ32">checking out his other work.&lt;/a>&lt;/p>
&lt;h2 id="cross-platform-elixir-applications-using-zig">Cross-platform Elixir applications using Zig&lt;/h2>
&lt;p>&lt;a href="https://twitter.com/wilton_quinn/status/1453152473112145928">Quinn Wilton shared&lt;/a> burrito, a project which uses Zig to enable building cross-platform Elixir applications&lt;/p>
&lt;blockquote>
&lt;p>I&amp;rsquo;m thrilled to open source work we&amp;rsquo;ve done to support building cross-platform Elixir applications!&lt;/p>
&lt;p>We&amp;rsquo;re using this code in production to distribute command-line applications to on-premise customer environments, without an installed Erlang runtime.&lt;/p>
&lt;/blockquote>
&lt;p>It is accompanied by an excellent talk at ElixirConf 2021 &lt;a href="https://www.youtube.com/watch?v=lDfjdGva3NE&amp;amp;list=PLqj39LCvnOWZna91xJ_i44g3rx4Brbpnv">which you can watch here&lt;/a>.&lt;/p>
&lt;h2 id="zig-gamedev-project">zig-gamedev project&lt;/h2>
&lt;p>&lt;a href="https://github.com/michal-z">@michal-z&lt;/a>, independent graphics programmer &amp;amp; ex-AMD/Frostbite/EA DICE/Intel engineer shares the &lt;a href="https://github.com/michal-z/zig-gamedev">zig-gamedev project&lt;/a>:&lt;/p>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/139600261-8c424980-afeb-4774-8ec9-aa8e5eca3662.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/139600261-8c424980-afeb-4774-8ec9-aa8e5eca3662.mp4">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/139793223-f3a68592-7d05-4355-a2ee-867e12b9d077.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/139600273-f2fbd11c-dfa3-4f6a-b1c0-fab486332e82.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/139600273-f2fbd11c-dfa3-4f6a-b1c0-fab486332e82.mp4">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/139793304-13e225c5-6a8b-4ff7-b59b-e7707b88d841.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;p>He recently &lt;a href="https://twitter.com/MichalZiulek/status/1447830542330826752">left a highly paid position at AMD&lt;/a> to work on his own indie game written in Zig. As a first step to build a full game he has created an open-source project called &lt;a href="https://github.com/michal-z/zig-gamedev">zig-gamedev&lt;/a>. This project contains growing collection of sample applications, libraries and other tools for game developers using Zig. The goal of the project is to build necessary technology, share knowledge, help others and promote the language. He works on it full-time, so &lt;a href="https://github.com/sponsors/michal-z">please consider supporting Michal on GitHub&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>I build game development stuff in Zig full-time. If you like my work and my mission to promote the language, please consider supporting me. I will create more sample applications, libraries and complete mini-games. I have game development knowledge and experience and I want to share it with others by writing open-source software in Zig.&lt;/p>
&lt;/blockquote>
&lt;h2 id="fuzz-testing">Fuzz testing&lt;/h2>
&lt;p>Ryan Liptak shared an &lt;a href="https://www.ryanliptak.com/blog/improving-fuzz-testing-with-zig-allocators/">excellent article&lt;/a> on improving fuzz testing using the AFL fuzzer with Zig allocators.&lt;/p>
&lt;h2 id="zig-snapshots-debugger">Zig snapshots debugger&lt;/h2>
&lt;p>&lt;a href="https://github.com/kubkon">@kubkon&lt;/a>, the Zig core team member working on the Zig linker, announced &lt;a href="https://github.com/kubkon/zig-snapshots">zig-snapshots&lt;/a> - an interactive debugging tool allowing you to preview snapshots of Zig&amp;rsquo;s incremental linker progression between subsequent incremental updates:&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/139801303-7fc75638-61ab-4401-a285-68d9ca380052.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/139801303-7fc75638-61ab-4401-a285-68d9ca380052.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h2 id="zig-self-hosted-compiler-progress">Zig self-hosted compiler progress&lt;/h2>
&lt;p>Andrew Kelley is &lt;a href="https://twitter.com/andy_kelley/status/1448869273431011330">sharing regular progress updates&lt;/a> on the Zig self-hosted compiler, which is a major milestone for Zig:&lt;/p>
&lt;blockquote>
&lt;p>Zig self-hosted compiler progress report:&lt;/p>
&lt;ul>
&lt;li>140,331 lines of code&lt;/li>
&lt;li>Behavior Test Suite:
&lt;ul>
&lt;li>LLVM backend: 365/1057 (35%) passing&lt;/li>
&lt;li>C backend: 42/1057 (4%) passing&lt;/li>
&lt;li>arm and x86 backends: work in progress towards the first passing test case&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Zig self-hosted &lt;a href="https://twitter.com/andy_kelley/status/1448869273431011330">https://twitter.com/andy_kelley/status/1448869273431011330&lt;/a>&lt;/p>
&lt;h2 id="glfw-bindings">GLFW bindings&lt;/h2>
&lt;p>This one from yours truly. I&amp;rsquo;ve announced &lt;a href="https://github.com/hexops/mach-glfw">mach-glfw&lt;/a>: Ziggified GLFW bindings with 100% API coverage, zero-fuss installation, cross compilation, and more as well as a &lt;a href="https://github.com/hexops/mach-glfw-vulkan-example">Vulkan example&lt;/a> to go along with it. This one small step towards &lt;a href="https://devlog.hexops.com/2021/mach-engine-the-future-of-graphics-with-zig">my vision for Mach engine&lt;/a>.&lt;/p>
&lt;p>Learn more: &lt;a href="https://devlog.hexops.com/2021/perfecting-glfw-for-zig-and-finding-undefined-behavior">Perfecting GLFW for Zig, and finding lurking undefined behavior that went unnoticed for 6+ years&lt;/a>&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/139573985-d862f35a-e78e-40c2-bc0c-9c4fb68d6ecd.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/139573985-d862f35a-e78e-40c2-bc0c-9c4fb68d6ecd.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h2 id="using-zig-and-translate-c-to-understand-weird-c-code">Using Zig and translate-c to understand weird C code&lt;/h2>
&lt;p>Over on zig.news, &lt;a href="https://zig.news/sobeston">Sobeston&lt;/a> has published &lt;a href="https://zig.news/sobeston/using-zig-and-translate-c-to-understand-weird-c-code-4f8">a very interesting article&lt;/a> walking through how they use Zig&amp;rsquo;s translate-c functionality (which converts C code to Zig code) to understand what a strange C code snippet is doing. Very much worth the read.&lt;/p>
&lt;h2 id="andrew-kelley-on-the-sourcegraph-podcast">Andrew Kelley on the Sourcegraph podcast&lt;/h2>
&lt;p>Recently I got the opportunity to join Andrew Kelley on the Sourcegraph podcast through my dayjob (I work at Sourcegraph), it&amp;rsquo;s a high-level chat around why Andrew built Zig, the challenges in doing so, how programmers can get funding for their side projects and hobbies, the differences between Zig and C, and why and how Zig can be faster than both C and Rust. Check it out on YouTube below or &lt;a href="https://about.sourcegraph.com/podcast/andrew-kelley/">read it here&lt;/a>.&lt;/p>
&lt;p>&lt;a align="center" href="https://www.youtube.com/watch?v=gn3YsZ6HUHw">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/139802947-59c266c7-8caf-4fe2-b6a0-2d8dd7dc909c.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h2 id="sat-november-6th-zig-showtime">Sat November 6th: Zig SHOWTIME!&lt;/h2>
&lt;p>We&amp;rsquo;re just a few days away from the next Zig SHOWTIME episode. Join live by going to &lt;a href="https://zig.show">https://zig.show&lt;/a> for more info, or &lt;a href="https://calendar.google.com/calendar/embed?src=8a028atr03arr440lsqp4a5tls%40group.calendar.google.com&amp;amp;ctz=Europe%2FRome&amp;amp;utm_source=ZigSHOWTIME&amp;amp;utm_medium=email&amp;amp;utm_campaign=zig-rush-zig-showtime-30">subscribe to the Zig SHOWTIME calendar&lt;/a> (&lt;a href="https://calendar.google.com/calendar/ical/8a028atr03arr440lsqp4a5tls%40group.calendar.google.com/public/basic.ics?utm_source=ZigSHOWTIME&amp;amp;utm_medium=email&amp;amp;utm_campaign=zig-rush-zig-showtime-30">iCal&lt;/a>) to have all episodes automatically added to your calendar.&lt;/p>
&lt;h2 id="nov-11-12th-handmade-seattle-conference">Nov 11-12th: Handmade Seattle conference!&lt;/h2>
&lt;p>Whether you join remotely or in-person, &lt;a href="https://www.handmade-seattle.com/">Handmade Seattle&lt;/a>, the Independent Systems Programming Conference is here!&lt;/p>
&lt;p>Several members of the Zig community are joining both online, and in person (myself included). The conference will also feature talks by Andrew Kelley,&lt;/p>
&lt;p>Andrew Kelley and others in the Zig community will also be giving talks and demos, so you won&amp;rsquo;t want to miss it!&lt;/p>
&lt;hr>
&lt;p>Zigmonthly recently surpassed 300+ subscribers and 7k+ viewers, and this is just the third article! Thanks so much for reading and being a part of this!&lt;/p>
&lt;p>If you like my work, you can &lt;a href="https://github.com/sponsors/slimsag">sponsor me on GitHub&lt;/a>&lt;/p></description></item></channel></rss>